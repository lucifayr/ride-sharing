// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rides.sql

package sqlc

import (
	"context"
	"database/sql"
)

const ridesCreate = `-- name: RidesCreate :one
INSERT INTO
    rides (
        location_from,
        location_to,
        tacking_place_at,
        created_by,
        driver,
        transport_limit
    )
VALUES
    (?, ?, ?, ?, ?, ?) RETURNING id, location_from, location_to, tacking_place_at, created_by, driver, transport_limit, created_at
`

type RidesCreateParams struct {
	LocationFrom   string `json:"locationFrom"`
	LocationTo     string `json:"locationTo"`
	TackingPlaceAt string `json:"tackingPlaceAt"`
	CreatedBy      string `json:"createdBy"`
	Driver         string `json:"driver"`
	TransportLimit int64  `json:"transportLimit"`
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) RidesCreate(ctx context.Context, arg RidesCreateParams) (Ride, error) {
	row := q.db.QueryRowContext(ctx, ridesCreate,
		arg.LocationFrom,
		arg.LocationTo,
		arg.TackingPlaceAt,
		arg.CreatedBy,
		arg.Driver,
		arg.TransportLimit,
	)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.LocationFrom,
		&i.LocationTo,
		&i.TackingPlaceAt,
		&i.CreatedBy,
		&i.Driver,
		&i.TransportLimit,
		&i.CreatedAt,
	)
	return i, err
}

const ridesGetById = `-- name: RidesGetById :one
SELECT
    rides.id,
    location_from,
    location_to,
    tacking_place_at,
    created_by,
    created_at,
    transport_limit,
    driver,
    users.email AS driver_email
FROM
    rides
    INNER JOIN users ON rides.driver = users.id
WHERE
    rides.id = ?
`

type RidesGetByIdRow struct {
	ID             string         `json:"id"`
	LocationFrom   string         `json:"locationFrom"`
	LocationTo     string         `json:"locationTo"`
	TackingPlaceAt string         `json:"tackingPlaceAt"`
	CreatedBy      string         `json:"createdBy"`
	CreatedAt      sql.NullString `json:"createdAt"`
	TransportLimit int64          `json:"transportLimit"`
	Driver         string         `json:"driver"`
	DriverEmail    string         `json:"driverEmail"`
}

func (q *Queries) RidesGetById(ctx context.Context, id string) (RidesGetByIdRow, error) {
	row := q.db.QueryRowContext(ctx, ridesGetById, id)
	var i RidesGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.LocationFrom,
		&i.LocationTo,
		&i.TackingPlaceAt,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.TransportLimit,
		&i.Driver,
		&i.DriverEmail,
	)
	return i, err
}

const ridesGetMany = `-- name: RidesGetMany :many
SELECT
    rides.id,
    location_from,
    location_to,
    tacking_place_at,
    created_by,
    created_at,
    transport_limit,
    driver,
    users.email AS driver_email
FROM
    rides
    INNER JOIN users ON rides.driver = users.id
ORDER BY
    created_at DESC
LIMIT
    50
OFFSET
    ?
`

type RidesGetManyRow struct {
	ID             string         `json:"id"`
	LocationFrom   string         `json:"locationFrom"`
	LocationTo     string         `json:"locationTo"`
	TackingPlaceAt string         `json:"tackingPlaceAt"`
	CreatedBy      string         `json:"createdBy"`
	CreatedAt      sql.NullString `json:"createdAt"`
	TransportLimit int64          `json:"transportLimit"`
	Driver         string         `json:"driver"`
	DriverEmail    string         `json:"driverEmail"`
}

func (q *Queries) RidesGetMany(ctx context.Context, offset int64) ([]RidesGetManyRow, error) {
	rows, err := q.db.QueryContext(ctx, ridesGetMany, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RidesGetManyRow
	for rows.Next() {
		var i RidesGetManyRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationFrom,
			&i.LocationTo,
			&i.TackingPlaceAt,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.TransportLimit,
			&i.Driver,
			&i.DriverEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
