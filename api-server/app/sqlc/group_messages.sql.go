// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_messages.sql

package sqlc

import (
	"context"
	"database/sql"
)

const groupMessagesCreate = `-- name: GroupMessagesCreate :one
INSERT INTO
    group_messages (content, group_id, sent_by, replies_to)
VALUES
    (?, ?, ?, ?) RETURNING id, group_id, content, sent_by, created_at, replies_to
`

type GroupMessagesCreateParams struct {
	Content   string         `json:"content"`
	GroupID   string         `json:"groupId"`
	SentBy    string         `json:"sentBy"`
	RepliesTo sql.NullString `json:"repliesTo"`
}

func (q *Queries) GroupMessagesCreate(ctx context.Context, arg GroupMessagesCreateParams) (GroupMessage, error) {
	row := q.db.QueryRowContext(ctx, groupMessagesCreate,
		arg.Content,
		arg.GroupID,
		arg.SentBy,
		arg.RepliesTo,
	)
	var i GroupMessage
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Content,
		&i.SentBy,
		&i.CreatedAt,
		&i.RepliesTo,
	)
	return i, err
}

const groupMessagesGetMany = `-- name: GroupMessagesGetMany :many
SELECT
    gm.id,
    gm.group_id,
    gm.content,
    gm.sent_by,
    u.email AS sent_by_email,
    gm.created_at,
    gm.replies_to
FROM
    group_messages gm
    INNER JOIN users u ON u.id = sent_by
WHERE
    group_id = ?
ORDER BY
    created_at
`

type GroupMessagesGetManyRow struct {
	ID          string         `json:"id"`
	GroupID     string         `json:"groupId"`
	Content     string         `json:"content"`
	SentBy      string         `json:"sentBy"`
	SentByEmail string         `json:"sentByEmail"`
	CreatedAt   string         `json:"createdAt"`
	RepliesTo   sql.NullString `json:"repliesTo"`
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) GroupMessagesGetMany(ctx context.Context, groupID string) ([]GroupMessagesGetManyRow, error) {
	rows, err := q.db.QueryContext(ctx, groupMessagesGetMany, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupMessagesGetManyRow
	for rows.Next() {
		var i GroupMessagesGetManyRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Content,
			&i.SentBy,
			&i.SentByEmail,
			&i.CreatedAt,
			&i.RepliesTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
