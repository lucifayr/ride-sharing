// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const usersCreate = `-- name: UsersCreate :one
INSERT INTO
    users (id, name, email, provider)
VALUES
    (?, ?, ?, ?) RETURNING id, name, email, provider
`

type UsersCreateParams struct {
	ID       string
	Name     string
	Email    string
	Provider string
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) UsersCreate(ctx context.Context, arg UsersCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, usersCreate,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Provider,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Provider,
	)
	return i, err
}

const usersGetById = `-- name: UsersGetById :one
SELECT
    id, name, email, provider
FROM
    users
WHERE
    id = ?
`

func (q *Queries) UsersGetById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, usersGetById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Provider,
	)
	return i, err
}

const usersUpdateNameAndEmail = `-- name: UsersUpdateNameAndEmail :one
UPDATE users
SET
    name = ?,
    email = ?
WHERE
    id = ? RETURNING id, name, email, provider
`

type UsersUpdateNameAndEmailParams struct {
	Name  string
	Email string
	ID    string
}

func (q *Queries) UsersUpdateNameAndEmail(ctx context.Context, arg UsersUpdateNameAndEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, usersUpdateNameAndEmail, arg.Name, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Provider,
	)
	return i, err
}
