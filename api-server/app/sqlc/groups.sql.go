// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package sqlc

import (
	"context"
	"database/sql"
)

const groupsCreate = `-- name: GroupsCreate :one
INSERT INTO
    ride_groups (name, description, created_by)
VALUES
    (?, ?, ?) RETURNING id, name, created_by, description
`

type GroupsCreateParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) GroupsCreate(ctx context.Context, arg GroupsCreateParams) (RideGroup, error) {
	row := q.db.QueryRowContext(ctx, groupsCreate, arg.Name, arg.Description, arg.CreatedBy)
	var i RideGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.Description,
	)
	return i, err
}

const groupsGetById = `-- name: GroupsGetById :one
SELECT
    id,
    name,
    description,
    created_by
FROM
    ride_groups
WHERE
    id = ?
`

type GroupsGetByIdRow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

func (q *Queries) GroupsGetById(ctx context.Context, id string) (GroupsGetByIdRow, error) {
	row := q.db.QueryRowContext(ctx, groupsGetById, id)
	var i GroupsGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
	)
	return i, err
}

const groupsGetMany = `-- name: GroupsGetMany :many
SELECT
    id,
    name,
    description,
    created_by
FROM
    ride_groups
ORDER BY
    name
LIMIT
    50
OFFSET
    ?
`

type GroupsGetManyRow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

func (q *Queries) GroupsGetMany(ctx context.Context, offset int64) ([]GroupsGetManyRow, error) {
	rows, err := q.db.QueryContext(ctx, groupsGetMany, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupsGetManyRow
	for rows.Next() {
		var i GroupsGetManyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsUpdateDescription = `-- name: GroupsUpdateDescription :exec
UPDATE ride_groups
SET
    description = ?
WHERE
    id = ?
`

type GroupsUpdateDescriptionParams struct {
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) GroupsUpdateDescription(ctx context.Context, arg GroupsUpdateDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, groupsUpdateDescription, arg.Description, arg.ID)
	return err
}

const groupsUpdateName = `-- name: GroupsUpdateName :exec
UPDATE ride_groups
SET
    name = ?
WHERE
    id = ?
`

type GroupsUpdateNameParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) GroupsUpdateName(ctx context.Context, arg GroupsUpdateNameParams) error {
	_, err := q.db.ExecContext(ctx, groupsUpdateName, arg.Name, arg.ID)
	return err
}
