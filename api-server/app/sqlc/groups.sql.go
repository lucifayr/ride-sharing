// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package sqlc

import (
	"context"
	"database/sql"
)

const groupsCreate = `-- name: GroupsCreate :one
INSERT INTO
    ride_groups (name, description, created_by)
VALUES
    (?, ?, ?) RETURNING id, name, created_by, description
`

type GroupsCreateParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) GroupsCreate(ctx context.Context, arg GroupsCreateParams) (RideGroup, error) {
	row := q.db.QueryRowContext(ctx, groupsCreate, arg.Name, arg.Description, arg.CreatedBy)
	var i RideGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.Description,
	)
	return i, err
}

const groupsGetById = `-- name: GroupsGetById :one
SELECT
    id,
    name,
    description,
    created_by
FROM
    ride_groups
WHERE
    id = ?
`

type GroupsGetByIdRow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

func (q *Queries) GroupsGetById(ctx context.Context, id string) (GroupsGetByIdRow, error) {
	row := q.db.QueryRowContext(ctx, groupsGetById, id)
	var i GroupsGetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
	)
	return i, err
}

const groupsGetMany = `-- name: GroupsGetMany :many
SELECT
    id,
    name,
    description,
    created_by
FROM
    ride_groups
ORDER BY
    name
LIMIT
    50
OFFSET
    ?
`

type GroupsGetManyRow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedBy   string         `json:"createdBy"`
}

func (q *Queries) GroupsGetMany(ctx context.Context, offset int64) ([]GroupsGetManyRow, error) {
	rows, err := q.db.QueryContext(ctx, groupsGetMany, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupsGetManyRow
	for rows.Next() {
		var i GroupsGetManyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsMembersGet = `-- name: GroupsMembersGet :many
SELECT
    group_id,
    user_id,
    u.email,
    join_status
FROM
    ride_group_members
    INNER JOIN users u ON u.id = user_id
WHERE
    group_id = ?
ORDER BY
    (
        SELECT
            gso.ordering
        FROM
            ride_group_members_join_status_ordering gso
        WHERE
            gso.status = join_status
    )
`

type GroupsMembersGetRow struct {
	GroupID    string `json:"groupId"`
	UserID     string `json:"userId"`
	Email      string `json:"email"`
	JoinStatus string `json:"joinStatus"`
}

func (q *Queries) GroupsMembersGet(ctx context.Context, groupID string) ([]GroupsMembersGetRow, error) {
	rows, err := q.db.QueryContext(ctx, groupsMembersGet, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupsMembersGetRow
	for rows.Next() {
		var i GroupsMembersGetRow
		if err := rows.Scan(
			&i.GroupID,
			&i.UserID,
			&i.Email,
			&i.JoinStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsMembersJoin = `-- name: GroupsMembersJoin :exec
INSERT INTO
    ride_group_members (group_id, user_id)
VALUES
    (?, ?)
`

type GroupsMembersJoinParams struct {
	GroupID string `json:"groupId"`
	UserID  string `json:"userId"`
}

func (q *Queries) GroupsMembersJoin(ctx context.Context, arg GroupsMembersJoinParams) error {
	_, err := q.db.ExecContext(ctx, groupsMembersJoin, arg.GroupID, arg.UserID)
	return err
}

const groupsMembersLeave = `-- name: GroupsMembersLeave :exec
DELETE FROM ride_group_members AS gm
WHERE
    gm.group_id = ?
    AND gm.user_id = ?
    AND NOT EXISTS (
        SELECT
            g.id
        FROM
            ride_groups g
        WHERE
            g.created_by = gm.user_id
    )
`

type GroupsMembersLeaveParams struct {
	GroupID string `json:"groupId"`
	UserID  string `json:"userId"`
}

func (q *Queries) GroupsMembersLeave(ctx context.Context, arg GroupsMembersLeaveParams) error {
	_, err := q.db.ExecContext(ctx, groupsMembersLeave, arg.GroupID, arg.UserID)
	return err
}

const groupsMembersSetStatus = `-- name: GroupsMembersSetStatus :exec
UPDATE ride_group_members
SET
    join_status = ?
WHERE
    group_id = ?
    AND user_id = ?
`

type GroupsMembersSetStatusParams struct {
	JoinStatus string `json:"joinStatus"`
	GroupID    string `json:"groupId"`
	UserID     string `json:"userId"`
}

func (q *Queries) GroupsMembersSetStatus(ctx context.Context, arg GroupsMembersSetStatusParams) error {
	_, err := q.db.ExecContext(ctx, groupsMembersSetStatus, arg.JoinStatus, arg.GroupID, arg.UserID)
	return err
}

const groupsUpdateDescription = `-- name: GroupsUpdateDescription :exec
UPDATE ride_groups
SET
    description = ?
WHERE
    id = ?
`

type GroupsUpdateDescriptionParams struct {
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) GroupsUpdateDescription(ctx context.Context, arg GroupsUpdateDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, groupsUpdateDescription, arg.Description, arg.ID)
	return err
}

const groupsUpdateName = `-- name: GroupsUpdateName :exec
UPDATE ride_groups
SET
    name = ?
WHERE
    id = ?
`

type GroupsUpdateNameParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) GroupsUpdateName(ctx context.Context, arg GroupsUpdateNameParams) error {
	_, err := q.db.ExecContext(ctx, groupsUpdateName, arg.Name, arg.ID)
	return err
}
