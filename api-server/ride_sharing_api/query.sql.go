// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package ride_sharing_api

import (
	"context"
)

const usersCreate = `-- name: UsersCreate :one
INSERT INTO
    users (name, email)
VALUES
    (?, ?) RETURNING id, name, email
`

type UsersCreateParams struct {
	Name  string
	Email string
}

// See sqlc docs for more information:
// https://docs.sqlc.dev/en/latest/tutorials/getting-started-sqlite.html#schema-and-queries
func (q *Queries) UsersCreate(ctx context.Context, arg UsersCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, usersCreate, arg.Name, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const usersGetById = `-- name: UsersGetById :one
SELECT
    id, name, email
FROM
    users
WHERE
    id = ?
`

func (q *Queries) UsersGetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, usersGetById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const usersUpdateName = `-- name: UsersUpdateName :one
UPDATE users
SET
    name = ?
WHERE
    id = ? RETURNING id, name, email
`

type UsersUpdateNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UsersUpdateName(ctx context.Context, arg UsersUpdateNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, usersUpdateName, arg.Name, arg.ID)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
