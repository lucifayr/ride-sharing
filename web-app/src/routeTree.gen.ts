/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthenticateImport } from './routes/authenticate'
import { Route as IndexImport } from './routes/index'
import { Route as RidesRideIdImport } from './routes/rides.$rideId'
import { Route as GroupsGroupIdImport } from './routes/groups.$groupId'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticateRoute = AuthenticateImport.update({
  id: '/authenticate',
  path: '/authenticate',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RidesRideIdRoute = RidesRideIdImport.update({
  id: '/rides/$rideId',
  path: '/rides/$rideId',
  getParentRoute: () => rootRoute,
} as any)

const GroupsGroupIdRoute = GroupsGroupIdImport.update({
  id: '/groups/$groupId',
  path: '/groups/$groupId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/authenticate': {
      id: '/authenticate'
      path: '/authenticate'
      fullPath: '/authenticate'
      preLoaderRoute: typeof AuthenticateImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/groups/$groupId': {
      id: '/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof GroupsGroupIdImport
      parentRoute: typeof rootRoute
    }
    '/rides/$rideId': {
      id: '/rides/$rideId'
      path: '/rides/$rideId'
      fullPath: '/rides/$rideId'
      preLoaderRoute: typeof RidesRideIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/authenticate': typeof AuthenticateRoute
  '/dashboard': typeof DashboardRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/rides/$rideId': typeof RidesRideIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/authenticate': typeof AuthenticateRoute
  '/dashboard': typeof DashboardRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/rides/$rideId': typeof RidesRideIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/authenticate': typeof AuthenticateRoute
  '/dashboard': typeof DashboardRoute
  '/groups/$groupId': typeof GroupsGroupIdRoute
  '/rides/$rideId': typeof RidesRideIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authenticate'
    | '/dashboard'
    | '/groups/$groupId'
    | '/rides/$rideId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/authenticate'
    | '/dashboard'
    | '/groups/$groupId'
    | '/rides/$rideId'
  id:
    | '__root__'
    | '/'
    | '/authenticate'
    | '/dashboard'
    | '/groups/$groupId'
    | '/rides/$rideId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticateRoute: typeof AuthenticateRoute
  DashboardRoute: typeof DashboardRoute
  GroupsGroupIdRoute: typeof GroupsGroupIdRoute
  RidesRideIdRoute: typeof RidesRideIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticateRoute: AuthenticateRoute,
  DashboardRoute: DashboardRoute,
  GroupsGroupIdRoute: GroupsGroupIdRoute,
  RidesRideIdRoute: RidesRideIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authenticate",
        "/dashboard",
        "/groups/$groupId",
        "/rides/$rideId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/authenticate": {
      "filePath": "authenticate.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/groups/$groupId": {
      "filePath": "groups.$groupId.tsx"
    },
    "/rides/$rideId": {
      "filePath": "rides.$rideId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
